//
//  Highlighting.swift
//  CodeHighlighting
//
//  Created by Yu Pengyang on 3/29/16.
//  Copyright Â© 2016 Caishuo. All rights reserved.
//

import UIKit
import JavaScriptCore

class Highlighting {
static let defaultHighlight = Highlighting()

let context: JSContext
private init () {
let webview = UIWebView()
context = webview.valueForKeyPath("documentView.webView.mainFrame.javaScriptContext") as! JSContext
//        context = JSContext(virtualMachine: JSVirtualMachine())
setup()
}

private func setup() {
do {
let contextString = try String(contentsOfFile: NSBundle.mainBundle().pathForResource("highlight.pack", ofType: "js")!)
//            context.evaluateScript("var window = {};")
context.evaluateScript(contextString)
let contextString1 = try String(contentsOfFile: NSBundle.mainBundle().pathForResource("traverse", ofType: "js")!)
context.evaluateScript(contextString1)
//            context.evaluateScript("var hljs = window.hljs;")
//            context.evaluateScript(contextString)
} catch {
fatalError("Highlighting setup fail: \(error)")
}
}

//    func highlight(lang: String, code: String) -> String? {
//        context.setObject(code, forKeyedSubscript: "code")
//        context.setObject(lang, forKeyedSubscript: "langForCode")
//        let value = context.evaluateScript("hljs.highlight(langForCode, code);").valueForProperty("value")
////        context.evaluateScript("var codeNode = document.createElement('code');")
////        context.evaluateScript("codeNode.innerHTML = coding.value;").valueForProperty("value")
////        context.evaluateScript("var nl = codeNode.childNodes;var i = nl.length, arr = new Array(i); for(; i--; arr[i] = nl[i]);")
////        let nodes = context.objectForKeyedSubscript("arr")
//        return value.toString()
//    }

func highlight(lang: String, code: String) -> [[String]]? {
context.setObject(code, forKeyedSubscript: "code")
context.setObject(lang, forKeyedSubscript: "langForCode")
let value = context.evaluateScript("highlightCode(code, langForCode);")
let valueArray = value.toArray() as? [[String]]
return valueArray
}

func highlightAuto(code: String) -> [[String]]? {
context.setObject(code, forKeyedSubscript: "code")
let value = context.evaluateScript("highlightCode(code)")
return value.toArray() as? [[String]]
}
}